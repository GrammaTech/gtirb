variables:
  # The IMAGE_TAG is derived from the branch name so that if a branch modifies
  # the CI images, it builds and runs using the new images without conflicting
  # with master.
  IMAGE_TAG: "$CI_COMMIT_REF_SLUG"
  GIT_SUBMODULE_STRATEGY: recursive
  EXTRA_INDEX_URL: https://__token__:$GL_PKG_API_TOKEN@git.grammatech.com/api/v4/projects/1587/packages/pypi/simple
  # The follow two variables are used by the package-uploader.
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID
  CONAN_PASSWORD: $CI_JOB_TOKEN
  CONAN_VERSION: "1.59"
  # Limit build parallelism to avoid overwhelming CI servers.
  MAKE_JOBS: 8

stages:
  - build-images
  - prebuild
  - build
  - build-installers
  - test-setup
  - test-packages1
  - test-packages2
  - deploy
  - deploy-apt
  - upload

default:
  tags: [shared]

.build-ci-image: &build-ci-image
  stage: build-images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Configure authentication credentials for GitLab
    - >-
      echo "{\"auths\":{
        \"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"},
        \"https://index.docker.io/v1/\":{\"username\":\"$DOCKERHUB_USERNAME\",\"password\":\"$DOCKERHUB_PASSWORD\"}
      }}" > /kaniko/.docker/config.json
    # Run the kaniko executor, which will build our image (using a cache if available)
    # Push to our internal registry
    # If we're on the master branch, also push the latest tag.
    - >-
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        export EXTRA_DEST="--destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}:latest"
      fi
    - >-
      /kaniko/executor
      --snapshotMode=redo
      --cache=true
      --cache-repo=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}/cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/$DOCKERFILE_PATH
      --destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}:$IMAGE_TAG
      $EXTRA_DEST

build-ci-image-ubuntu20:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.ubuntu20
    IMAGE_NAME: ubuntu20

build-ci-image-ubuntu22:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.ubuntu22
    IMAGE_NAME: ubuntu22

build-ci-image-ubuntu24:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.ubuntu24
    IMAGE_NAME: ubuntu24

build-ci-image-static:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.static
    IMAGE_NAME: static

check-format:
  stage: prebuild
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 10.0.0. This is available in Ubuntu 20 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

build-docs:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - html
  script:
    - mkdir build
    - cd build
    # Need to configure Python API to get setup.py file
    - cmake .. -DGTIRB_ENABLE_TESTS=OFF
    # Install python dependencies
    - cd python
    - pip install -e '.[doc]'
    - cd ..
    # Re-configure to pick up python dependencies
    - cmake ..
    - make doc
    - mv doc/html ..

.build-template: &build
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/$IMAGE_NAME:$IMAGE_TAG
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - mkdir build
    - cd build
    - RELEASE_VERSION=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || RELEASE_VERSION=ON'
    - >
      cmake ../
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DCMAKE_CXX_COMPILER=${CXX_COMPILER:-g++}
      -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)"
      -DENABLE_CODE_COVERAGE=${ENABLE_CODE_COVERAGE:-OFF}
      -DGTIRB_BUILD_SHARED_LIBS=${GTIRB_BUILD_SHARED_LIBS:-ON}
      -DGTIRB_PACKAGE_POLICY=$PACKAGE_POLICY
      -DGTIRB_RELEASE_VERSION=$RELEASE_VERSION
      -DGTIRB_STRIP_DEBUG_SYMBOLS=On
      -DGTIRB_CL_API=${GTIRB_CL_API:-OFF}
      -DGTIRB_CXX_API=${GTIRB_CXX_API:-OFF}
      -DGTIRB_JAVA_API=${GTIRB_JAVA_API:-OFF}
      -DGTIRB_PY_API=${GTIRB_PY_API:-OFF}
    - make -j${MAKE_JOBS}
    - 'if [ ${GTIRB_PY_API:-OFF} = ON ]; then pip3 install -e ./python; fi'
    - ctest --output-on-failure

build-ubuntu20-gcc:
  variables:
    IMAGE_NAME: 'ubuntu20'
    GTIRB_CXX_API: 'ON'
    CXX_COMPILER: 'g++'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
    PACKAGE_POLICY: "unix"
  <<: *build

build-ubuntu22-gcc:
  variables:
    IMAGE_NAME: 'ubuntu22'
    GTIRB_CXX_API: 'ON'
    CXX_COMPILER: 'g++'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
    PACKAGE_POLICY: "unix"
  <<: *build

build-ubuntu24-gcc:
  variables:
    IMAGE_NAME: 'ubuntu24'
    GTIRB_CXX_API: 'ON'
    CXX_COMPILER: 'g++'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
    PACKAGE_POLICY: "unix"
  <<: *build

build-ubuntu24-gcc-debug:
  variables:
    IMAGE_NAME: 'ubuntu24'
    GTIRB_CXX_API: 'ON'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
    PACKAGE_POLICY: "unix"
  <<: *build

build-ubuntu24-clang-debug:
  variables:
    IMAGE_NAME: 'ubuntu24'
    GTIRB_CXX_API: 'ON'
    CXX_COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
    PACKAGE_POLICY: "unix"
  <<: *build

build-static:
  variables:
    IMAGE_NAME: 'static'
    GTIRB_CXX_API: 'ON'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
    GTIRB_BUILD_SHARED_LIBS: 'OFF'
  <<: *build

build-java:
  variables:
    IMAGE_NAME: 'ubuntu24'
    GTIRB_JAVA_API: 'ON'
  <<: *build

build-lisp:
  variables:
    IMAGE_NAME: 'ubuntu20'
    GTIRB_CL_API: 'ON'
  <<: *build

build-python:
  variables:
    IMAGE_NAME: 'ubuntu24'
    GTIRB_PY_API: 'ON'
  <<: *build

generate-coverage:
  variables:
    IMAGE_NAME: 'ubuntu24'
    BUILD_TYPE: 'Debug'
    CXX_COMPILER: 'g++'
    ENABLE_CODE_COVERAGE: 'ON'
    GTIRB_CXX_API: 'ON'
    GTIRB_PY_API: 'ON'
  artifacts:
    # Upload coverage reports and source for report-coverage-* jobs to use.
    paths:
      - build/**/*.gcno
      - build/**/*.gcda
      - build/python/.coverage*
      - build/**/*.py
      - build/**/*.h
      - build/**/*.cc
      - build/**/*.cpp
  before_script:
    - pip install gcovr coverage
  <<: *build

# > If there is more than one matched line in the job output, the last line is used
# https://docs.gitlab.com/ee/ci/yaml/index.html#coverage
# We output the two coverage numbers in separate jobs(report-coverage-*) so
# that both can be reported to GitLab.
report-coverage-cpp:
  stage: build
  needs: [generate-coverage]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  script:
    - pip install gcovr
    - cd build
    - gcovr --exclude=googletest-src --exclude=doc --exclude=..*/proto --exclude=..*/test --root ..

report-coverage-py:
  stage: build
  needs: [generate-coverage]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/python/coverage.xml
  script:
    - pip install coverage
    - cd build/python
    - coverage xml
    - ../../.ci/adjust-coverage-paths.py --in-place coverage.xml --build-dir ..
    - coverage report


# The build artifact timestamps may be out-of-date relative to the newly cloned
# repository for later jobs. These commands will update the timestamps to bring
# them up to date without actually building much. This is significantly faster
# than rebuilding out-of-date files in the later jobs.
.update-artifact-timestamps: &update-artifact-timestamps
  - make -C build --touch

python-wheel:
  stage: build-installers
  needs: [build-python]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-*-py*-none-any.whl
  script:
    - *update-artifact-timestamps
    - pip3 wheel --no-deps build/python

python-wheel-unstable:
  stage: build-installers
  needs: [python-wheel]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-unstable-py3-none-any.whl
  script:
    - cp gtirb-*-py*-none-any.whl ./gtirb-unstable-py3-none-any.whl

test-capstone-example:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  needs: ['build-ubuntu24-gcc']
  script:
    - *update-artifact-timestamps
    - cd build
    - '[[ ! -f bin/ex-jumps ]]'
    - apt-get install -y libcapstone-dev
    - cmake ..
    - make -j${MAKE_JOBS}
    - '[[ -f bin/ex-jumps ]]'

test-default-install:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/$IMAGE_NAME:$IMAGE_TAG
  variables:
    IMAGE_NAME: 'ubuntu24'
    COMPILER: 'g++-9'
  needs: ['build-ubuntu24-gcc']
  script:
    - *update-artifact-timestamps
    - make -C build install && rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-all.sh

test-default-install-static:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/static:$IMAGE_TAG
  needs: ['build-static']
  script:
    - *update-artifact-timestamps
    - '[ -e build/lib/libgtirb.a ]'
    - '[ ! -e build/lib/libgtirb.so ]'
    - make -C build install
    - rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-static.sh

test-install-different-prefix:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/$IMAGE_NAME:$IMAGE_TAG
  variables:
    IMAGE_NAME: 'ubuntu24'
    COMPILER: 'g++-9'
  needs: ['build-ubuntu24-gcc']
  script:
    - *update-artifact-timestamps
    - cmake . -B build -DCMAKE_INSTALL_PREFIX=/tmp/prefix
    - make -C build install
    - rm -rf build
    - >
      CPPFLAGS=-I/tmp/prefix/include
      LDFLAGS=-L/tmp/prefix/lib
      LD_LIBRARY_PATH=/tmp/prefix/lib
      .ci/test-install-all.sh

test-install-with-destdir:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/$IMAGE_NAME:$IMAGE_TAG
  variables:
    IMAGE_NAME: 'ubuntu24'
    COMPILER: 'g++-9'
  needs: ['build-ubuntu24-gcc']
  script:
    - *update-artifact-timestamps
    - DESTDIR=/tmp/destdir make -C ./build install
    - >
      CPPFLAGS=-I/tmp/destdir/usr/local/include
      LDFLAGS=-L/tmp/destdir/usr/local/lib
      LD_LIBRARY_PATH=/tmp/destdir/usr/local/lib
      .ci/test-install-all.sh

test-interop:
  stage: test-packages1
  needs: ['build-ubuntu24-gcc', 'python-wheel']
  image: ${DOCKER_REGISTRY}/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  script:
    - *update-artifact-timestamps
    - pip3 install gtirb-*-py*-none-any.whl
    - .ci/test-interop.sh

.conan-linux: &conan-linux
  stage: deploy
  needs: [check-format]
  image: $DOCKER_REGISTRY/rewriting/gtirb/$IMAGE_NAME:$IMAGE_TAG
  script:
    - python3 -m pip install --upgrade conan~=$CONAN_VERSION
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    - export PYTHONPATH="$(pwd)"
    - python3 .ci/build.py

conan-linux-gcc9:
  variables:
    IMAGE_NAME: ubuntu20
  <<: *conan-linux

conan-linux-gcc11:
  variables:
    IMAGE_NAME: ubuntu22
  <<: *conan-linux

.conan-windows: &conan-windows
  stage: deploy
  needs: [check-format]
  tags: [ddisasm-windows]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb*.zip
  script:
    # Setting CI_PROJECT_DIR to $(pwd) because CI doesn't properly set CI_PROJECT_DIR with VirtualBox runners.
    - export CI_PROJECT_DIR=`cygpath -w $(pwd)`
    # Initialize
    - systeminfo
    - python -m pip install --upgrade conan~=$CONAN_VERSION
    - export PYTHONPATH=$CI_PROJECT_DIR
    # Setup Remote and Authenticate
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    # Build
    - python .ci/build.py -s build_type=$BUILD_TYPE
    # Install
      # Python print() on Windows returns CRLF and will cause issues in CI - use "print('string', end='')" when outputting from python.
    - export PKG_INSTALL_NAME=`python -c "import conanfile; print(conanfile.Properties().conan_recipe, end='')"`
    - conan install $PKG_INSTALL_NAME -g deploy --build=missing --install-folder="./packages"
    # Package
    - export PKG_NAME=`conan inspect . --raw name`
    - export PKG_VERSION=`conan inspect . --raw version`
    - export PKG_ARCH=`uname -m`
    - cd ./packages
      # Library Package
    - export PKG_FILENAME="${CI_PROJECT_DIR}\\${PKG_NAME}-${PKG_VERSION}.win10.${PKG_ARCH}.zip"
    - export PKG_MANIFEST=(
        "gtirb/bin/gtirb.dll"
        "gtirb/licenses/LICENSE.txt"
      )
    - zip -r $PKG_FILENAME ${PKG_MANIFEST[@]}
      # Development Package
    - export PKG_FILENAME_DEV="${CI_PROJECT_DIR}\\${PKG_NAME}-dev-${PKG_VERSION}.win10.${PKG_ARCH}.zip"
    - export PKG_MANIFEST_DEV=(
        "${PKG_MANIFEST[@]}"
        "gtirb/lib/gtirb.lib"
        "gtirb/include/gtirb"
      )
    - zip -r $PKG_FILENAME_DEV ${PKG_MANIFEST_DEV[@]}

conan-windows-debug:
  variables:
    BUILD_TYPE: Debug
  <<: *conan-windows

conan-windows-release:
  variables:
    BUILD_TYPE: Release
  <<: *conan-windows

conan-windows-32:
  stage: deploy
  tags: [ddisasm-windows]
  needs: []
  variables:
    ARCHITECTURE: x64
  script:
    - systeminfo
    - export PATH="C:\\Program Files\\Python38;$PATH"
    - export PYTHONPATH="$(cygpath -w $(pwd))"
    # Install conan
    - python -m pip install --upgrade conan~=$CONAN_VERSION
    # Setup Remote and Authenticate
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    # The boost options disable building boost with libiconv.  This is important, because we can't get the package to build with --build=libiconv.
    - CI_PROJECT_DIR=$(cygpath -w $(pwd)) python .ci/build.py -s arch=x86 -s compiler.runtime=MT --build=protobuf -o protobuf:with_zlib=False --build=gtirb --build=boost -o boost:zlib=False -o boost:bzip2=False -o boost:without_locale=True -o boost:without_log=True --build=missing

external-pypi:
  stage: deploy
  needs: [build-ubuntu24-gcc, python-wheel]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  script:
    - pip3 install gtirb-*-py*-none-any.whl
    - GTIRB_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
    # We won't be releasing our dev packages externally, so fail if this is a
    # .dev package.
    - if [[ "$GTIRB_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ ]]; then exit 1; fi
    - twine check gtirb-*-py*-none-any.whl
    - twine upload gtirb-*-py*-none-any.whl -u __token__ -p $PYPI_API_KEY

# On master, we only upload and overwrite `.dev` versions of the python
# package.  Non-.dev versions should only be uploaded on versioned
# release-.* branches.  This is so the versioning of our python packages
# coincides with that of our conan packages, where dev packages are
# produced from master, and stable, versioned packages are produced
# on release-.* branches.
internal-pypi:
  stage: deploy
  needs: [build-ubuntu24-gcc, python-wheel]
  image: python:3.9
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    # If you need to publish a package for a specific branch, change the
    # package version to something like, '0.0.0.dev0+mybranchname', uncomment
    # the rule below and replace 'mybranchname' with your branch name.
    #- if: '$CI_COMMIT_BRANCH == "mybranchname"'
    #  changes:
    #    - python/gtirb/setup.py.in
  script:
    - pip3 install twine wheel setuptools --upgrade
    - wget https://git.grammatech.com/research/templates/python-module/raw/master/.pypirc
    - sed "s/password = <access token>/password = $GL_PKG_API_TOKEN/" .pypirc > ~/.pypirc
    - pip3 install gtirb-*-py*-none-any.whl
    - NEW_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
    - if [[ "$NEW_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ && "$CI_COMMIT_REF_NAME" =~ ^release-.* ]]; then exit 1; fi
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
        if [[ ! "$NEW_VERSION" =~ \.dev[[:digit:]]*$ ]]; then
          echo "[ERROR] Only .dev versions can be uploaded from the master branch.";
          exit 1;
        fi;
        if pip3 install --extra-index-url=$EXTRA_INDEX_URL "gtirb>$NEW_VERSION" 2>/dev/null; then
          echo "[ERROR] The package version being published on master should always be >= the version in the repository.";
          exit 1;
        fi;
        wget https://git.grammatech.com/research/templates/python-module/raw/master/delete_remote_packages.py;
        python3 delete_remote_packages.py $GL_PKG_API_TOKEN gtirb-*-py*-none-any.whl;
      fi
    - twine check gtirb-*-py*-none-any.whl
    - twine upload --verbose --repository repypi gtirb-*-py*-none-any.whl

# Apt packaging related jobs
.build-ubuntu-packages: &build-ubuntu-packages
  stage: build-installers
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - pip3 install setuptools wheel --upgrade
    - cd build
    - cpack -G "DEB" -D CPACK_GTIRB_PACKAGE=debian-lib;
    - cpack -G "DEB" -D CPACK_GTIRB_PACKAGE=debian-dev;
    - cpack -G "DEB" -D CPACK_GTIRB_PACKAGE=debian-debug;

build-ubuntu20-packages:
  needs: [build-ubuntu20-gcc]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  <<: *build-ubuntu-packages

build-ubuntu22-packages:
  needs: [build-ubuntu22-gcc]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu22:$IMAGE_TAG
  <<: *build-ubuntu-packages

build-ubuntu24-packages:
  needs: [build-ubuntu24-gcc]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  <<: *build-ubuntu-packages

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages


.test-ubuntu-libgtirb-dev: &test-ubuntu-libgtirb-dev
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - cat /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-dev_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - cp .ci/test-install.cpp ./
    - g++ test-install.cpp -std=c++17 -o test-install -lgtirb -lstdc++
    - ./test-install

.test-ubuntu-libgtirb: &test-ubuntu-libgtirb
  stage: test-packages2
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ./test-install

.test-ubuntu-libgtirb-dbg: &test-ubuntu-libgtirb-dbg
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-dbg_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb.so | grep ''Build ID: '' | cut -d":" -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ];'

setup-ubuntu20-test-apt-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [build-ubuntu20-packages]
  <<: *setup-test-apt-repo

setup-ubuntu22-test-apt-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu22:$IMAGE_TAG
  needs: [build-ubuntu22-packages]
  <<: *setup-test-apt-repo

setup-ubuntu24-test-apt-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  needs: [build-ubuntu24-packages]
  <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [setup-ubuntu20-test-apt-repo]
  <<: *test-ubuntu-libgtirb-dev

test-ubuntu22-libgtirb-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu22:$IMAGE_TAG
  needs: [setup-ubuntu22-test-apt-repo]
  <<: *test-ubuntu-libgtirb-dev

test-ubuntu24-libgtirb-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  needs: [setup-ubuntu24-test-apt-repo]
  <<: *test-ubuntu-libgtirb-dev

test-ubuntu20-libgtirb-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [setup-ubuntu20-test-apt-repo]
  <<: *test-ubuntu-libgtirb-dbg

test-ubuntu22-libgtirb-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu22:$IMAGE_TAG
  needs: [setup-ubuntu22-test-apt-repo]
  <<: *test-ubuntu-libgtirb-dbg

test-ubuntu24-libgtirb-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  needs: [setup-ubuntu24-test-apt-repo]
  <<: *test-ubuntu-libgtirb-dbg

test-ubuntu20-libgtirb:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [setup-ubuntu20-test-apt-repo,test-ubuntu20-libgtirb-dev]
  <<: *test-ubuntu-libgtirb

test-ubuntu22-libgtirb:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu22:$IMAGE_TAG
  needs: [setup-ubuntu22-test-apt-repo,test-ubuntu22-libgtirb-dev]
  <<: *test-ubuntu-libgtirb

test-ubuntu24-libgtirb:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  needs: [setup-ubuntu24-test-apt-repo,test-ubuntu24-libgtirb-dev]
  <<: *test-ubuntu-libgtirb

.debian-installer: &debian-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb*.deb'
  script:
    - cp build/*gtirb*.deb ./

debian-installer-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [test-ubuntu20-libgtirb, build-ubuntu20-packages]
  <<: *debian-installer

debian-installer-ubuntu22:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu22:$IMAGE_TAG
  needs: [test-ubuntu22-libgtirb, build-ubuntu22-packages]
  <<: *debian-installer

debian-installer-ubuntu24:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu24:$IMAGE_TAG
  needs: [test-ubuntu24-libgtirb, build-ubuntu24-packages]
  <<: *debian-installer

.apt-upload: &apt-upload
  stage: deploy-apt
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend

apt-public-ubuntu20-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: unstable

apt-public-ubuntu22-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu22
    APT_REPO: public
    APT_REPO_CODENAMES: jammy
    APT_REPO_COMPONENT: unstable

apt-public-ubuntu24-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu24
    APT_REPO: public
    APT_REPO_CODENAMES: noble
    APT_REPO_COMPONENT: unstable

apt-public-ubuntu20-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: stable

apt-public-ubuntu22-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu22
    APT_REPO: public
    APT_REPO_CODENAMES: jammy
    APT_REPO_COMPONENT: stable

apt-public-ubuntu24-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu24
    APT_REPO: public
    APT_REPO_CODENAMES: jammy
    APT_REPO_COMPONENT: stable

apt-internal-ubuntu20-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: unstable

apt-internal-ubuntu22-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu22
    APT_REPO: internal
    APT_REPO_CODENAMES: jammy
    APT_REPO_COMPONENT: unstable

apt-internal-ubuntu24-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu24
    APT_REPO: internal
    APT_REPO_CODENAMES: jammy
    APT_REPO_COMPONENT: unstable

apt-internal-ubuntu20-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: stable

apt-internal-ubuntu22-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu22
    APT_REPO: internal
    APT_REPO_CODENAMES: jammy
    APT_REPO_COMPONENT: stable

apt-internal-ubuntu24-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu24
    APT_REPO: internal
    APT_REPO_CODENAMES: jammy
    APT_REPO_COMPONENT: stable

maven-central-upload:
  stage: deploy
  needs: [build-java]
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: build-ubuntu24-gcc
    JAVA_POM_SUBDIR: ./build/java

.windows-upload: &windows-upload
  stage: upload
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  needs: [conan-windows-release]

windows-upload-public:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: conan-windows-release
    FILESERVER: public
    FILESERVER_SUBDIR_NAME: windows-release

windows-upload-internal:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: conan-windows-release
    FILESERVER: internal
    FILESERVER_SUBDIR_NAME: windows-release

wheel-upload-public:
  stage: upload
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  needs: [python-wheel-unstable]
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: python-wheel-unstable
    FILESERVER: public
    FILESERVER_SUBDIR_NAME: python
