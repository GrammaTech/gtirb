variables:
  LOCAL_IMAGE_NAME: '$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive
  EXTRA_INDEX_URL: https://__token__:$GL_PKG_API_TOKEN@git.grammatech.com/api/v4/projects/1587/packages/pypi/simple

stages:
  - check-format
  - build
  - build-installers
  - test-setup
  - test-packages1
  - test-packages2
  - deploy
  - deploy-to-pypi

default:
  tags: [cluster]

check-format:
  image: $DOCKER_REGISTRY/rewriting/gtirb/formatter
  stage: check-format
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

.build-template: &build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - mkdir build
    - cd build
    - cmake ../ -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DGTIRB_STRIP_DEBUG_SYMBOLS=On
    - make -j
    - ctest -V

.windows-build-template: &windows-build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - GTIRB-*-win64
  tags: [gtirb-windows]
  script:
    - systeminfo
    # Build & test
    - rm -rf build CMakeCache.txt CMakeFiles CMakeScripts
    - mkdir build
    - cd build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G "Ninja" -DBOOST_ROOT=\"C:\\Boost\" -DCMAKE_PREFIX_PATH=\"C:\\Program Files (x86)\\protobuf\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DPYTHON=\"C:\\Python38\\python.exe\" -DProtobuf_USE_STATIC_LIBS=ON .."
    - PATH="$PATH;C:\\Program Files\\CMake\\bin" cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja -j 1"
    - cd build && cmd.exe /C "C:\\PROGRA~1\\CMake\\bin\\ctest.exe -V"
    # Build & test with capstone
    - cd ..
    # Install capstone
    - pushd $HOME
    - mkdir /cygdrive/C/capstone-$BUILD_TYPE
    - curl -L https://github.com/aquynh/capstone/archive/4.0.1.tar.gz -o 4.0.1.tar.gz
    - tar xf 4.0.1.tar.gz
    - cd capstone-4.0.1
    - mkdir build
    - cd build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G "Ninja" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=C:\\capstone-${BUILD_TYPE} .."
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja -j 1"
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja install"
    - popd
    # Build GTIRB
    - cd build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G "Ninja" -DCAPSTONE=C:\\capstone-${BUILD_TYPE}\\lib\\capstone.lib -DCMAKE_PREFIX_PATH=\"C:\\Program Files (x86)\\protobuf\" -DCMAKE_CXX_FLAGS=\"/I C:\\capstone-${BUILD_TYPE}\\include\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DProtobuf_USE_STATIC_LIBS=ON .."
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja -j 1"
    - cmd.exe /C "C:\\PROGRA~1\\CMake\\bin\\ctest.exe -V -C ${BUILD_TYPE}"
    # Generate and upload installer
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cpack.exe -G \"ZIP\""
    - ZIP_FILE=(GTIRB-*-win64.zip)
    - BASE_DIRECTORY="${ZIP_FILE%.*}"
    - unzip $ZIP_FILE
    - cp bin/$(echo "gtirb$(echo $BUILD_TYPE | sed 's/Debug/d/;s/RelWithDebInfo//').pdb") $BASE_DIRECTORY/bin/
    - cp -r $BASE_DIRECTORY ../

build-ubuntu16-gcc7:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu16
  variables:
    OS: 'ubuntu16'
    CXX_COMPILER: 'g++-7'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu18-gcc7:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    CXX_COMPILER: 'g++-7'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-static:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/static
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - mkdir build
    - cd build
    - cmake ../ -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - ctest -V
    # ensure that we produced a .a file instead of a .so
    - '[ -e lib/libgtirb.a ]'
    - '[ ! -e lib/libgtirb.so ]'

build-arch-gcc:
  # TODO: The most recent versions of protobuf on arch break our build.
  # at some point, we'll need to figure this out, but in the meantime,
  # we allow_failure so our pipelines will go through.
  allow_failure: true
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/arch
  variables:
    OS: 'arch'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - mkdir /tmp/aur
    - cp .ci/PKGBUILD /tmp/aur
    - sed -i "s|git://github.com/grammatech/gtirb.git|git+file://${CI_PROJECT_DIR}|" /tmp/aur/PKGBUILD
    - pushd /tmp/aur/
    - makepkg
    - cd /tmp/aur/src/gtirb/build
    - ctest -V
    - cd ..
    - cp -r build $CI_PROJECT_DIR
    - popd
    - cp /tmp/aur/*.pkg.tar.* ./build

build-arch-gcc-debug:
  allow_failure: true
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/arch
  variables:
    OS: 'arch'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-arch-clang-debug:
  allow_failure: true
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/arch
  variables:
    OS: 'arch'
    CXX_COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-windows-msvc-debug:
  variables:
    BUILD_TYPE: 'Debug'
  <<: *windows-build

build-windows-msvc-relwithdebinfo:
  variables:
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *windows-build

build-ubuntu16-packages:
  stage: build-installers
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu16
  needs: [build-ubuntu16-gcc7]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - cd build
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=lib;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=dev;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=debug;

build-ubuntu18-packages:
  stage: build-installers
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  needs: [build-ubuntu18-gcc7]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - pip3 install setuptools wheel --upgrade
    - cd build
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=lib;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=dev;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=debug;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=python;

build-ubuntu20-packages:
  stage: build-installers
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  needs: [build-ubuntu20-gcc]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - pip3 install setuptools wheel --upgrade
    - cd build
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=lib;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=dev;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=debug;
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=python;

test-default-install:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - make -t -C build
    - make -C build install install-python && rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-all.sh

test-default-install-static:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/static
  needs: ['build-static']
  script:
    - make -t -C build
    - make -C build install && rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-static.sh

test-install-different-prefix:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - make -t -C ./build
    - cd build && cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/prefix
    - cd ..
    - echo /tmp/prefix/lib/python$(python3 -c "import sys; print('%s.%s' % sys.version_info[:2])")/site-packages > pydir
    - mkdir -p $(cat pydir)
    - PYTHONPATH=$(cat pydir) make -C build install install-python && rm -rf build
    - PYTHONPATH=$(cat pydir) CPPFLAGS=-I/tmp/prefix/include LDFLAGS=-L/tmp/prefix/lib LD_LIBRARY_PATH=/tmp/prefix/lib .ci/test-install-all.sh

test-install-with-destdir:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - make -t -C ./build
    - DESTDIR=/tmp/destdir make -C ./build install install-python

test-install-python-virtualenv:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - mkdir /tmp/myvenv
    - python3 -m venv /tmp/myvenv
    - sh -c '. /tmp/myvenv/bin/activate ; cd build/python && python3 setup.py install'
    - rm -rf build
    - sh -c '. /tmp/myvenv/bin/activate ; python3 .ci/test-install.py'

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-libgtirb-dev: &test-ubuntu-libgtirb-dev
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo $TRUSTED
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - cat /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated libgtirb-dev
    - cp .ci/test-install.cpp ./
    - if [ $(lsb_release -sc) == "xenial" ]; then CC=g++-7; else CC=g++; fi
    - ${CC} test-install.cpp -std=c++17 -o test-install -lgtirb -lstdc++
    - ./test-install

.test-ubuntu-libgtirb: &test-ubuntu-libgtirb
  stage: test-packages2
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated libgtirb
    - ./test-install

.test-ubuntu-libgtirb-dbg: &test-ubuntu-libgtirb-dbg
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated libgtirb-dbg
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb.so | grep ''Build ID: '' | cut -d":" -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ];'

setup-ubuntu16-test-apt-repo:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu16
   needs: [build-ubuntu16-packages]
   <<: *setup-test-apt-repo

test-ubuntu16-libgtirb-dev:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu16
   needs: [setup-ubuntu16-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dev

test-ubuntu16-libgtirb-dbg:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu16
   needs: [setup-ubuntu16-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dbg

test-ubuntu16-libgtirb:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu16
   needs: [setup-ubuntu16-test-apt-repo,test-ubuntu16-libgtirb-dev]
   <<: *test-ubuntu-libgtirb

setup-ubuntu18-test-apt-repo:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [build-ubuntu18-packages]
   <<: *setup-test-apt-repo

test-ubuntu18-libgtirb-dev:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [setup-ubuntu18-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dev

test-ubuntu18-libgtirb-dbg:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [setup-ubuntu18-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dbg

test-ubuntu18-libgtirb:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [setup-ubuntu18-test-apt-repo,test-ubuntu18-libgtirb-dev]
   <<: *test-ubuntu-libgtirb

setup-ubuntu20-test-apt-repo:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [build-ubuntu20-packages]
   <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-dev:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [setup-ubuntu20-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dev

test-ubuntu20-libgtirb-dbg:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [setup-ubuntu20-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dbg

test-ubuntu20-libgtirb:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [setup-ubuntu20-test-apt-repo,test-ubuntu20-libgtirb-dev]
   <<: *test-ubuntu-libgtirb

test-arch-package:
  allow_failure: true
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/arch
  needs: ['build-arch-gcc']
  script:
    - cp .ci/test-install.cpp ./
    - pacman --noconfirm -U build/gtirb-git-*.pkg.tar.*
    - g++ test-install.cpp -std=c++17 -o test-install -lgtirb -lstdc++
    - ./test-install

debian-installer-ubuntu16:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu16
  needs: [test-ubuntu16-libgtirb, build-ubuntu16-packages]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb*.deb'
  script:
    - cp build/*gtirb*.deb ./

debian-installer-ubuntu18:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  needs: [test-ubuntu18-libgtirb, build-ubuntu18-packages]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb*.deb'
  script:
    - cp build/*gtirb*.deb ./

debian-installer-ubuntu20:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  needs: [test-ubuntu20-libgtirb, build-ubuntu20-packages]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb*.deb'
  script:
    - cp build/*gtirb*.deb ./

conan-ubuntu18:
  stage: deploy
  needs: [check-format]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  script:
    - python3 -m pip install conan
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - export PYTHONPATH="$(pwd)"
    - python3 .ci/build.py

conan-windows:
  stage: deploy
  needs: [check-format]
  tags: [gtirb-windows]
  script:
    - systeminfo
    - export PATH="C:\\Program Files\\Python38;$PATH"
    # Install conan
    - python -m pip install conan
    # Run build script
    - export PYTHONPATH="$(cygpath -w $(pwd))"
    - export PATH="$PATH;C:\\Program Files\\CMake\\bin"
    - export CMAKE_PREFIX_PATH="C:\\Program Files (x86)\\protobuf"
    - export PYTHON="C:\\Python38\\python.exe"
    - export BOOST_ROOT="C:\\Boost"
    - CI_PROJECT_DIR=$(cygpath -w $(pwd)) python .ci/build.py

package-arch:
  allow_failure: true
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/arch
  needs: [test-arch-package, build-arch-gcc]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'gtirb-git-*.pkg.tar.*'
  script:
    - cp build/gtirb-git-*.pkg.tar.* ./

python-wheel:
  stage: deploy
  needs: [build-ubuntu18-gcc7]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-*-py*-none-any.whl
  script:
    - make -t -C build
    - make -C build python-wheel
    - cp build/python/dist/*.whl ./

external-pypi:
  stage: deploy-to-pypi
  needs: [build-ubuntu18-gcc7, python-wheel]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  script:
    - pip3 install gtirb-*-py*-none-any.whl
    - GTIRB_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
    # We won't be releasing our dev packages externally, so fail if this is a
    # .dev package.
    - if [[ "$GTIRB_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ ]]; then exit 1; fi
    - pip3 install twine wheel setuptools --upgrade;
    - cd build/python;
    - rm -rf build dist gtirb.egg-info;
    - python3 setup.py sdist bdist_wheel;
    - twine check dist/*;
    - twine upload dist/* -u __token__ -p $PYPI_API_KEY;

# On master, we only upload and overwrite `.dev` versions of the python
# package.  Non-.dev versions should only be uploaded on versioned
# release-.* branches.  This is so the versioning of our python packages
# coincides with that of our conan packages, where dev packages are
# produced from master, and stable, versioned packages are produced
# on release-.* branches.
internal-pypi:
  stage: deploy-to-pypi
  needs: [build-ubuntu18-gcc7, python-wheel]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    # If you need to publish a package for a specific branch, change the
    # package version to something like, '0.0.0.dev0+mybranchname', uncomment
    # the rule below and replace 'mybranchname' with your branch name.
    #- if: '$CI_COMMIT_BRANCH == "mybranchname"'
    #  changes:
    #    - python/gtirb/setup.py.in
  script:
    - pip3 install twine wheel setuptools --upgrade
    - wget https://git.grammatech.com/research/templates/python-module/raw/master/.pypirc
    - sed "s/password = <access token>/password = $GL_PKG_API_TOKEN/" .pypirc > ~/.pypirc
    - pip3 install gtirb-*-py*-none-any.whl
    - NEW_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
    - if [[ "$NEW_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ && "$CI_COMMIT_REF_NAME" =~ ^release-.* ]]; then exit 1; fi
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
        if [[ ! "$NEW_VERSION" =~ \.dev[[:digit:]]*$ ]]; then
          echo "[ERROR] Only .dev versions can be uploaded from the master branch.";
          exit 1;
        fi;
        if pip3 install --extra-index-url=$EXTRA_INDEX_URL "gtirb>$NEW_VERSION" 2>/dev/null; then
          echo "[ERROR] The package version being published on master should always be >= the version in the repository.";
          exit 1;
        fi;
        wget https://git.grammatech.com/research/templates/python-module/raw/master/delete_remote_packages.py;
        python3 delete_remote_packages.py $GL_PKG_API_TOKEN gtirb-*-py*-none-any.whl;
      fi
    - cd build/python
    - rm -rf build dist *.egg-info
    - python3 setup.py sdist bdist_wheel
    - twine check dist/*
    - twine upload --verbose --repository repypi dist/*
