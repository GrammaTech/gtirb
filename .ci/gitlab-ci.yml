variables:
  # The IMAGE_TAG is derived from the branch name so that if a branch modifies
  # the CI images, it builds and runs using the new images without conflicting
  # with master.
  IMAGE_TAG: "$CI_COMMIT_REF_SLUG"
  GIT_SUBMODULE_STRATEGY: recursive
  EXTRA_INDEX_URL: https://__token__:$GL_PKG_API_TOKEN@git.grammatech.com/api/v4/projects/1587/packages/pypi/simple
  # The follow two variables are used by the package-uploader.
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID
  CONAN_VERSION: "1.59"
  CPACK_DEBIAN_PACKAGE_RELEASE: focal

stages:
  - build-images
  - prebuild
  - build
  - build-installers
  - test-setup
  - test-packages1
  - test-packages2
  - deploy
  - upload

default:
  tags: [shared]

.build-ci-image: &build-ci-image
  stage: build-images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Configure authentication credentials for GitLab
    - >-
      echo "{\"auths\":{
        \"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"},
        \"https://index.docker.io/v1/\":{\"username\":\"$DOCKERHUB_USERNAME\",\"password\":\"$DOCKERHUB_PASSWORD\"}
      }}" > /kaniko/.docker/config.json
    # Run the kaniko executor, which will build our image (using a cache if available)
    # Push to our internal registry
    # If we're on the master branch, also push the latest tag.
    - >-
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        export EXTRA_DEST="--destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}:latest"
      fi
    - >-
      /kaniko/executor
      --snapshotMode=redo
      --cache=true
      --cache-repo=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}/cache
      --context=$CI_PROJECT_DIR
      $DOCKERFILE_ARGS
      --destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}:$IMAGE_TAG
      $EXTRA_DEST

build-ci-image-ubuntu20:
  <<: *build-ci-image
  variables:
    DOCKERFILE_ARGS: --dockerfile=$CI_PROJECT_DIR/.ci/Dockerfile.ubuntu20
    IMAGE_NAME: ubuntu20

build-ci-image-static:
  <<: *build-ci-image
  variables:
    DOCKERFILE_ARGS: --dockerfile=$CI_PROJECT_DIR/.ci/Dockerfile.static
    IMAGE_NAME: static

build-ci-image-rhel8:
  <<: *build-ci-image
  variables:
    DOCKERFILE_ARGS: "--dockerfile=$CI_PROJECT_DIR/.ci/Dockerfile.rhel --build-arg BASE=registry.access.redhat.com/ubi8/ubi"
    IMAGE_NAME: rhel8

build-ci-image-rhel9:
  <<: *build-ci-image
  variables:
    DOCKERFILE_ARGS: "--dockerfile=$CI_PROJECT_DIR/.ci/Dockerfile.rhel --build-arg BASE=registry.access.redhat.com/ubi9/ubi"
    IMAGE_NAME: rhel9

build-ci-image-rpm-repo:
  <<: *build-ci-image
  variables:
    DOCKERFILE_ARGS: "--dockerfile=$CI_PROJECT_DIR/.ci/Dockerfile.rpm-repo"
    IMAGE_NAME: rpm-repo

check-format:
  stage: prebuild
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

build-docs:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - html
  script:
    - mkdir build
    - cd build
    # Need to configure Python API to get setup.py file
    - cmake .. -DGTIRB_ENABLE_TESTS=OFF
    # Install python dependencies
    - cd python
    - pip install -e '.[doc]'
    - cd ..
    # Re-configure to pick up python dependencies
    - cmake ..
    - make doc
    - mv doc/html ..

.build:
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - mkdir build
    - cd build
    - RELEASE_VERSION=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || RELEASE_VERSION=ON'
    - cmake ../ -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DGTIRB_STRIP_DEBUG_SYMBOLS=On -DGTIRB_RELEASE_VERSION=$RELEASE_VERSION -DGTIRB_PACKAGE_POLICY=$PACKAGE_POLICY
    - make -j
    - pip3 install -e python
    - ctest -V

# Apt/RPM packaging script
.build-packages:
  script:
    - pip3 install setuptools wheel --upgrade
    - CPACK_GTIRB_STABLE_PKG_NAME=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || CPACK_GTIRB_STABLE_PKG_NAME=ON'
    - cpack -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE_TYPE=lib $CPACK_EXTRA_ARGS
    - cpack -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE_TYPE=dev $CPACK_EXTRA_ARGS
    - cpack -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE_TYPE=debug $CPACK_EXTRA_ARGS

.build-rhel-packages:
  extends: .build-packages
  artifacts:
    paths:
      - rpm.tar.gz
  script:
    - !reference [.build-packages, script]
    - tar -czvf ../rpm.tar.gz *.rpm

build-ubuntu20-gcc:
  extends: [.build, .build-packages]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
    PACKAGE_POLICY: "unix"
    CPACK_EXTRA_ARGS: "-G DEB -D CPACK_DEBIAN_PACKAGE_RELEASE=${CPACK_DEBIAN_PACKAGE_RELEASE}"
  script:
    - !reference [.build, script]
    - !reference [.build-packages, script]

build-ubuntu20-gcc-debug:
  extends: [.build]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
    PACKAGE_POLICY: "unix"
  script:
    - !reference [.build, script]

build-ubuntu20-clang-debug:
  extends: [.build]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
    PACKAGE_POLICY: "unix"
  script:
    - !reference [.build, script]

build-static:
  extends: [.build]
  image: $DOCKER_REGISTRY/rewriting/gtirb/static:$IMAGE_TAG
  script:
    - mkdir build
    - cd build
    - cmake ../ -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - ctest -V
    # ensure that we produced a .a file instead of a .so
    - '[ -e lib/libgtirb.a ]'
    - '[ ! -e lib/libgtirb.so ]'

.build-rhel:
  extends: [.build]
  variables:
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
    PACKAGE_POLICY: "unix"

build-rhel8:
  extends: [.build-rhel, .build-rhel-packages]
  needs: [build-ci-image-rhel8]
  image: $DOCKER_REGISTRY/rewriting/gtirb/rhel8:$IMAGE_TAG
  variables:
    CPACK_EXTRA_ARGS: "-G RPM -D CPACK_RPM_PACKAGE_RELEASE=1.el8"
  script:
    - !reference [.build-rhel, script]
    - !reference [.build-rhel-packages, script]

build-rhel9:
  extends: [.build-rhel, .build-rhel-packages]
  needs: [build-ci-image-rhel9]
  image: $DOCKER_REGISTRY/rewriting/gtirb/rhel9:$IMAGE_TAG
  variables:
    CPACK_EXTRA_ARGS: "-G RPM -D CPACK_RPM_PACKAGE_RELEASE=1.el9"
  script:
    - !reference [.build-rhel, script]
    - !reference [.build-rhel-packages, script]

test-capstone-example:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  script:
    - cd build
    - '[[ ! -f bin/ex-jumps ]]'
    - rm -rf *
    - apt-get install -y libcapstone-dev
    - cmake ..
    - make -j
    - '[[ -f bin/ex-jumps ]]'

coverage:
  stage: build
  needs: [check-format]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  script:
    - mkdir build
    - cd build
    - pip install gcovr coverage
    - cmake -DENABLE_CODE_COVERAGE=ON ..
    - cmake --build .
    - pip3 install -e python
    - ctest
    - gcovr --exclude=googletest-src --exclude=doc --exclude=..*/proto --exclude=..*/test --root ..
    - cd python
    - coverage report --omit=gtirb/proto/* --show-missing

test-default-install:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++-9'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu20-gcc']
  script:
    - cmake --build build
    - make -C build install && rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-all.sh

test-default-install-static:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/static:$IMAGE_TAG
  needs: ['build-static']
  script:
    - cmake --build build
    - make -C build install && rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-static.sh

test-install-different-prefix:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++-9'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu20-gcc']
  script:
    - cmake --build build
    - cd build && cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/prefix
    - cd ..
    - make -C build install && rm -rf build
    - CPPFLAGS=-I/tmp/prefix/include LDFLAGS=-L/tmp/prefix/lib LD_LIBRARY_PATH=/tmp/prefix/lib .ci/test-install-all.sh

test-install-with-destdir:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++-9'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu20-gcc']
  script:
    - cmake --build build
    - DESTDIR=/tmp/destdir make -C ./build install

test-install-python-virtualenv:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++-9'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu20-gcc']
  script:
    - mkdir /tmp/myvenv
    - python3 -m venv /tmp/myvenv
    - sh -c '. /tmp/myvenv/bin/activate ; cd build/python && pip3 install .'
    - rm -rf build
    - sh -c '. /tmp/myvenv/bin/activate ; python3 .ci/test-install.py'

test-interop:
  stage: test-packages1
  needs: ['build-ubuntu20-gcc']
  image: ${DOCKER_REGISTRY}/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  script:
    - sh -c 'cd build/python && pip3 install .'
    - sh -c '.ci/test-interop.sh'

conan-linux-gcc9:
  stage: deploy
  needs: [check-format]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  script:
    - python3 -m pip install --upgrade conan~=$CONAN_VERSION
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - CONAN_PASSWORD=$CI_JOB_TOKEN conan user ci_user -r gitlab -p
    - export PYTHONPATH="$(pwd)"
    - python3 .ci/build.py

.conan-windows: &conan-windows
  stage: deploy
  needs: [check-format]
  tags: [ddisasm-windows]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb*.zip
  script:
    # Setting CI_PROJECT_DIR to $(pwd) because CI doesn't properly set CI_PROJECT_DIR with VirtualBox runners.
    - export CI_PROJECT_DIR=`cygpath -w $(pwd)`
    # Initialize
    - systeminfo
    - python -m pip install --upgrade conan~=$CONAN_VERSION
    - export PYTHONPATH=$CI_PROJECT_DIR
    # Setup Remote and Authenticate
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - CONAN_PASSWORD=$CI_JOB_TOKEN conan user ci_user -r gitlab -p
    # Build
    - python .ci/build.py -s build_type=$BUILD_TYPE
    # Install
      # Python print() on Windows returns CRLF and will cause issues in CI - use "print('string', end='')" when outputting from python.
    - export PKG_INSTALL_NAME=`python -c "import conanfile; print(conanfile.Properties().conan_recipe, end='')"`
    - conan install $PKG_INSTALL_NAME -g deploy --build=missing --install-folder="./packages"
    # Package
    - export PKG_NAME=`conan inspect . --raw name`
    - export PKG_VERSION=`conan inspect . --raw version`
    - export PKG_ARCH=`uname -m`
    - cd ./packages
      # Library Package
    - export PKG_FILENAME="${CI_PROJECT_DIR}\\${PKG_NAME}-${PKG_VERSION}.win10.${PKG_ARCH}.zip"
    - export PKG_MANIFEST=(
        "gtirb/bin/gtirb.dll"
        "gtirb/licenses/LICENSE.txt"
      )
    - zip -r $PKG_FILENAME ${PKG_MANIFEST[@]}
      # Development Package
    - export PKG_FILENAME_DEV="${CI_PROJECT_DIR}\\${PKG_NAME}-dev-${PKG_VERSION}.win10.${PKG_ARCH}.zip"
    - export PKG_MANIFEST_DEV=(
        "${PKG_MANIFEST[@]}"
        "gtirb/lib/gtirb.lib"
        "gtirb/include/gtirb"
      )
    - zip -r $PKG_FILENAME_DEV ${PKG_MANIFEST_DEV[@]}

conan-windows-debug:
  variables:
    BUILD_TYPE: Debug
  <<: *conan-windows

conan-windows-release:
  variables:
    BUILD_TYPE: Release
  <<: *conan-windows

conan-windows-32:
  stage: deploy
  tags: [ddisasm-windows]
  needs: []
  variables:
    ARCHITECTURE: x64
  script:
    - systeminfo
    - export PATH="C:\\Program Files\\Python38;$PATH"
    - export PYTHONPATH="$(cygpath -w $(pwd))"
    # Install conan
    - python -m pip install --upgrade conan~=$CONAN_VERSION
    # Setup Remote and Authenticate
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - CONAN_PASSWORD=$CI_JOB_TOKEN conan user ci_user -r gitlab -p
    # The boost options disable building boost with libiconv.  This is important, because we can't get the package to build with --build=libiconv.
    - CI_PROJECT_DIR=$(cygpath -w $(pwd)) python .ci/build.py -s arch=x86 -s compiler.runtime=MT --build=protobuf -o protobuf:with_zlib=False --build=gtirb --build=boost -o boost:zlib=False -o boost:bzip2=False -o boost:without_locale=True -o boost:without_log=True --build=missing

python-wheel:
  stage: build-installers
  needs: [build-ubuntu20-gcc]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-*-py*-none-any.whl
  script:
    - cmake build build
    - make -C build python-wheel
    - cp build/python/dist/*.whl ./

python-wheel-unstable:
  stage: build-installers
  needs: [build-ubuntu20-gcc]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-unstable-py3-none-any.whl
  script:
    - cmake build build
    - make -C build python-wheel
    - cp build/python/dist/*.whl ./gtirb-unstable-py3-none-any.whl

external-pypi:
  stage: deploy
  needs: [build-ubuntu20-gcc, python-wheel]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  script:
    - pip3 install gtirb-*-py*-none-any.whl
    - GTIRB_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
    # We won't be releasing our dev packages externally, so fail if this is a
    # .dev package.
    - if [[ "$GTIRB_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ ]]; then exit 1; fi
    - pip3 install twine wheel setuptools --upgrade;
    - cd build/python;
    - rm -rf build dist gtirb.egg-info;
    - python3 setup.py sdist bdist_wheel;
    - twine check dist/*;
    - twine upload dist/* -u __token__ -p $PYPI_API_KEY;

# On master, we only upload and overwrite `.dev` versions of the python
# package.  Non-.dev versions should only be uploaded on versioned
# release-.* branches.  This is so the versioning of our python packages
# coincides with that of our conan packages, where dev packages are
# produced from master, and stable, versioned packages are produced
# on release-.* branches.
internal-pypi:
  stage: deploy
  needs: [build-ubuntu20-gcc, python-wheel]
  image: python:3.9
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    # If you need to publish a package for a specific branch, change the
    # package version to something like, '0.0.0.dev0+mybranchname', uncomment
    # the rule below and replace 'mybranchname' with your branch name.
    #- if: '$CI_COMMIT_BRANCH == "mybranchname"'
    #  changes:
    #    - python/gtirb/setup.py.in
  script:
    - pip3 install twine wheel setuptools --upgrade
    - wget https://git.grammatech.com/research/templates/python-module/raw/master/.pypirc
    - sed "s/password = <access token>/password = $GL_PKG_API_TOKEN/" .pypirc > ~/.pypirc
    - pip3 install gtirb-*-py*-none-any.whl
    - NEW_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
    - if [[ "$NEW_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ && "$CI_COMMIT_REF_NAME" =~ ^release-.* ]]; then exit 1; fi
    - if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        if [[ ! "$NEW_VERSION" =~ \.dev[[:digit:]]*$ ]]; then
          echo "[ERROR] Only .dev versions can be uploaded from the master branch.";
          exit 1;
        fi;
        if pip3 install --extra-index-url=$EXTRA_INDEX_URL "gtirb>$NEW_VERSION" 2>/dev/null; then
          echo "[ERROR] The package version being published on master should always be >= the version in the repository.";
          exit 1;
        fi;
        wget https://git.grammatech.com/research/templates/python-module/raw/master/delete_remote_packages.py;
        python3 delete_remote_packages.py $GL_PKG_API_TOKEN gtirb-*-py*-none-any.whl;
      fi
    - cd build/python
    - rm -rf build dist *.egg-info
    - python3 setup.py sdist bdist_wheel
    - twine check dist/*
    - twine upload --verbose --repository repypi dist/*

.build-rpm-repo:
  stage: test-setup
  image: $DOCKER_REGISTRY/rewriting/gtirb/rpm-repo:$IMAGE_TAG
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - rpm-repo
  script:
    - mkdir rpm-repo && tar -xvf rpm.tar.gz -C rpm-repo
    - createrepo rpm-repo

.test-libgtirb-dbg:
  script:
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb.so | grep ''Build ID: '' | cut -d":" -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ];'

.test-install:
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
  script:
    - g++ .ci/test-install.cpp -std=c++17 -o test-install -lgtirb -lstdc++
    - ./test-install

build-rhel8-repo:
  extends: .build-rpm-repo
  needs: [build-rhel8]

build-rhel9-repo:
  extends: .build-rpm-repo
  needs: [build-rhel9]

.test-rhel-libgtirb-dev:
  extends: .test-install
  script:
    - yum install -y --repofrompath test-repo,rpm-repo --nogpgcheck libgtirb-dev
    - !reference [.test-install, script]

.test-rhel-libgtirb:
  stage: test-packages2
  script:
    - yum install -y --repofrompath test-repo,rpm-repo --nogpgcheck libgtirb
    - ./test-install

.test-rhel-libgtirb-dbg:
  stage: test-packages1
  script:
    - yum install -y --repofrompath test-repo,rpm-repo --nogpgcheck libgtirb-dbg
    - yum install -y binutils # readelf
    - !reference [.test-libgtirb-dbg, script]

test-rhel8-libgtirb-dev:
  extends: .test-rhel-libgtirb-dev
  needs: [build-rhel8-repo, build-ci-image-rhel8]
  image: $DOCKER_REGISTRY/rewriting/gtirb/rhel8:$IMAGE_TAG

test-rhel9-libgtirb-dev:
  extends: .test-rhel-libgtirb-dev
  needs: [build-rhel9-repo, build-ci-image-rhel9]
  image: $DOCKER_REGISTRY/rewriting/gtirb/rhel9:$IMAGE_TAG

test-rhel8-libgtirb:
  extends: .test-rhel-libgtirb
  needs: [build-rhel8-repo, test-rhel8-libgtirb-dev]
  image: registry.access.redhat.com/ubi8/ubi

test-rhel9-libgtirb:
  extends: .test-rhel-libgtirb
  needs: [build-rhel9-repo, test-rhel9-libgtirb-dev]
  image: registry.access.redhat.com/ubi9/ubi

test-rhel8-libgtirb-dbg:
  extends: .test-rhel-libgtirb-dbg
  needs: [build-rhel8-repo]
  image: registry.access.redhat.com/ubi8/ubi

test-rhel9-libgtirb-dbg:
  extends: .test-rhel-libgtirb-dbg
  needs: [build-rhel9-repo]
  image: registry.access.redhat.com/ubi9/ubi

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-libgtirb-dev:
  extends: .test-install
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - cat /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-dev.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - !reference [.test-install, script]

.test-ubuntu-libgtirb: &test-ubuntu-libgtirb
  stage: test-packages2
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ./test-install

.test-ubuntu-libgtirb-dbg: &test-ubuntu-libgtirb-dbg
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-dbg.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - !reference [.test-libgtirb-dbg, script]

setup-ubuntu20-test-apt-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [build-ubuntu20-gcc]
  <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-dev:
  extends: .test-ubuntu-libgtirb-dev
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [setup-ubuntu20-test-apt-repo]

test-ubuntu20-libgtirb-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [setup-ubuntu20-test-apt-repo]
  <<: *test-ubuntu-libgtirb-dbg

test-ubuntu20-libgtirb:
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [setup-ubuntu20-test-apt-repo,test-ubuntu20-libgtirb-dev]
  <<: *test-ubuntu-libgtirb

build-debian-ubuntu20-packages:
  stage: build-installers
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20:$IMAGE_TAG
  needs: [build-ubuntu20-gcc]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb*.deb'
  script:
    - mv build/*gtirb*.deb ./

.upload-public:
  variables:
    REPO_ACCESS: public

.upload-internal:
  variables:
    REPO_ACCESS: internal

.upload-unstable:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    REPO_COMPONENT: unstable

.upload-stable:
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    REPO_COMPONENT: stable

.upload:
  stage: deploy
  trigger:
    project: rewriting/utility/package-uploader
    branch: vfolts/dev # TODO: remove, should be default branch
    strategy: depend
  variables:
    UPSTREAM_PROJECT: $CI_PROJECT_PATH
    UPSTREAM_REF: $CI_COMMIT_REF_NAME

.apt-upload:
  extends: .upload
  needs: [build-debian-ubuntu20-packages, test-ubuntu20-libgtirb-dev, test-ubuntu20-libgtirb-dbg, test-ubuntu20-libgtirb]
  variables:
    JOB_NAME: build-debian-ubuntu20-packages
    APT_REPO_CODENAMES: ${CPACK_DEBIAN_PACKAGE_RELEASE}

apt-upload-public-unstable:
  extends: [.apt-upload, .upload-public, .upload-unstable]

apt-upload-public-stable:
  extends: [.apt-upload, .upload-public, .upload-stable]

apt-upload-internal-unstable:
  extends: [.apt-upload, .upload-internal, .upload-unstable]

apt-upload-internal-stable:
  extends: [.apt-upload, .upload-internal, .upload-stable]

.rpm-rhel8-upload:
  extends: .upload
  needs: [build-rhel8, test-rhel8-libgtirb-dev, test-rhel8-libgtirb, test-rhel8-libgtirb-dbg]
  variables:
    JOB_NAME: build-rhel8

.rpm-rhel9-upload:
  extends: .upload
  needs: [build-rhel9, test-rhel9-libgtirb-dev, test-rhel9-libgtirb, test-rhel9-libgtirb-dbg]
  variables:
    JOB_NAME: build-rhel9

rpm-rhel8-upload-public-unstable:
  extends: [.rpm-rhel8-upload, .upload-public, .upload-unstable]

rpm-rhel9-upload-public-unstable:
  extends: [.rpm-rhel9-upload, .upload-public, .upload-unstable]

rpm-rhel8-upload-public-stable:
  extends: [.rpm-rhel8-upload, .upload-public, .upload-stable]

rpm-rhel9-upload-public-stable:
  extends: [.rpm-rhel9-upload, .upload-public, .upload-stable]

rpm-rhel8-upload-internal-unstable:
  extends: [.rpm-rhel8-upload, .upload-internal, .upload-unstable]

rpm-rhel9-upload-internal-unstable:
  extends: [.rpm-rhel9-upload, .upload-internal, .upload-unstable]

rpm-rhel8-upload-internal-stable:
  extends: [.rpm-rhel8-upload, .upload-internal, .upload-stable]

rpm-rhel9-upload-internal-stable:
  extends: [.rpm-rhel9-upload, .upload-internal, .upload-stable]

maven-central-upload:
  stage: deploy
  needs: [build-ubuntu20-gcc]
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: build-ubuntu20-gcc
    JAVA_POM_SUBDIR: ./build/java

.windows-upload: &windows-upload
  stage: upload
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  needs: [conan-windows-release]

windows-upload-public:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: conan-windows-release
    FILESERVER: public
    FILESERVER_SUBDIR_NAME: windows-release

windows-upload-internal:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: conan-windows-release
    FILESERVER: internal
    FILESERVER_SUBDIR_NAME: windows-release

wheel-upload-public:
  stage: upload
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  needs: [python-wheel-unstable]
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: python-wheel-unstable
    FILESERVER: public
    FILESERVER_SUBDIR_NAME: python

mock-default-branch-pipeline:
  stage: build-images
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH"
      when: manual
      allow_failure: true

  trigger: # include this file
    include: .ci/gitlab-ci.yml

  variables:
    CI_DEFAULT_BRANCH: $CI_COMMIT_BRANCH
    MOCK_PRODUCTION_PIPELINE: "true"
