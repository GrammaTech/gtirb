variables:
  LOCAL_IMAGE_NAME: '$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive
  EXTRA_INDEX_URL: https://__token__:$GL_PKG_API_TOKEN@git.grammatech.com/api/v4/projects/1587/packages/pypi/simple
  # The follow two variables are used by the package-uploader.
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID


stages:
  - check-format
  - build
  - build-installers
  - test-setup
  - test-packages1
  - test-packages2
  - deploy
  - deploy-to-pypi
  - deploy-to-apt

default:
  tags: [cluster]

check-format:
  image: $DOCKER_REGISTRY/rewriting/gtirb/formatter
  stage: check-format
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

.build-template: &build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - mkdir build
    - cd build
    - cmake ../ -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DGTIRB_STRIP_DEBUG_SYMBOLS=On
    - make -j
    - ctest -V

build-ubuntu18-gcc7:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    CXX_COMPILER: 'g++-7'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    CPACK_GENERATOR: 'DEB'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-ubuntu20-clang-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-static:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/static
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - mkdir build
    - cd build
    - cmake ../ -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - ctest -V
    # ensure that we produced a .a file instead of a .so
    - '[ -e lib/libgtirb.a ]'
    - '[ ! -e lib/libgtirb.so ]'

build-centos8-gcc-relwithdebuginfo:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb/centos8
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    # What's the deal with PADDED_DIR? See:
    # https://cmake.org/cmake/help/latest/cpack_gen/rpm.html#variable:CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    # From the above link: "...Limitation is that replaced path part must
    # be shorter or of equal length than the length of its replacement.  If
    # that is not the case either CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX variable
    # has to be set to a shorter path or source directories must be placed on
    # a longer path."
    - PADDED_DIR=long-dir-name-padding-for-CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    - mkdir $PADDED_DIR && cd $PADDED_DIR
    - git clone .. .
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBOOST_INCLUDEDIR='/usr/include/boost169' -DGTIRB_STRIP_DEBUG_SYMBOLS=Off ..
    - make
    - cpack -G "RPM" -D CPACK_GTIRB_PACKAGE=rpm-lib
    - cpack -G "RPM" -D CPACK_GTIRB_PACKAGE=rpm-dev
    - cpack -G "RPM" -D CPACK_GTIRB_PACKAGE=rpm-python
    - cd ../ && mv build ../build

test-capstone-example:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  needs: ['build-ubuntu20-gcc']
  script:
    - cd build
    - '[[ ! -f bin/ex-jumps ]]'
    - rm -rf *
    - apt-get install -y libcapstone-dev
    - cmake ..
    - make -j
    - '[[ -f bin/ex-jumps ]]'

test-default-install:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - make -t -C build
    - make -C build install install-python && rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-all.sh

test-default-install-static:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/static
  needs: ['build-static']
  script:
    - make -t -C build
    - make -C build install && rm -rf build
    - LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH .ci/test-install-static.sh

test-install-different-prefix:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - make -t -C ./build
    - cd build && cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/prefix
    - cd ..
    - echo /tmp/prefix/lib/python$(python3 -c "import sys; print('%s.%s' % sys.version_info[:2])")/site-packages > pydir
    - mkdir -p $(cat pydir)
    - PYTHONPATH=$(cat pydir) make -C build install install-python && rm -rf build
    - PYTHONPATH=$(cat pydir) CPPFLAGS=-I/tmp/prefix/include LDFLAGS=-L/tmp/prefix/lib LD_LIBRARY_PATH=/tmp/prefix/lib .ci/test-install-all.sh

test-install-with-destdir:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - make -t -C ./build
    - DESTDIR=/tmp/destdir make -C ./build install install-python

test-install-python-virtualenv:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    PROTOBUF_PYTHON_RUNTIME: 'cpp'
  needs: ['build-ubuntu18-gcc7']
  script:
    - mkdir /tmp/myvenv
    - python3 -m venv /tmp/myvenv
    - sh -c '. /tmp/myvenv/bin/activate ; cd build/python && pip3 install .'
    - rm -rf build
    - sh -c '. /tmp/myvenv/bin/activate ; python3 .ci/test-install.py'

test-centos8-gtirb-python:
  needs: ['build-centos8-gcc-relwithdebuginfo']
  stage: test-packages1
  image: ${DOCKER_REGISTRY}/rewriting/gtirb/centos8
  script:
    - dnf --nogpgcheck localinstall -y build/python3-gtirb.rpm
    - python3 .ci/test-install.py

test-centos8-gtirb-devel:
  needs: ['build-centos8-gcc-relwithdebuginfo']
  stage: test-packages1
  image: ${DOCKER_REGISTRY}/rewriting/gtirb/centos8
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - cd build
    - dnf --nogpgcheck localinstall -y libgtirb.rpm libgtirb-devel.rpm
    - cp ../.ci/test-install.cpp ./
    - g++ test-install.cpp -I/usr/include/boost169 -std=c++17 -o test-install -lgtirb -lstdc++
    - ./test-install

test-centos8-gtirb:
  needs: ['test-centos8-gtirb-devel']
  stage: test-packages2
  image: ${DOCKER_REGISTRY}/rewriting/gtirb/centos8
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - cd build
    - dnf --nogpgcheck localinstall -y libgtirb.rpm
    - ./test-install

conan-linux-gcc7:
  stage: deploy
  needs: [check-format]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  script: &conan-build
    - python3 -m pip install conan
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - export PYTHONPATH="$(pwd)"
    - python3 .ci/build.py

conan-linux-gcc9:
  stage: deploy
  needs: [check-format]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  script:
    *conan-build

.conan-windows: &conan-windows
  stage: deploy
  needs: [check-format]
  tags: [gtirb-windows]
  script:
    - systeminfo
    - export PATH="C:\\Program Files\\Python38;$PATH"
    # Install conan
    - python -m pip install conan
    # Run build script
    - export PYTHONPATH="$(cygpath -w $(pwd))"
    - export PATH="$PATH;C:\\Program Files\\CMake\\bin"
    - export CMAKE_PREFIX_PATH="C:\\Program Files (x86)\\protobuf"
    - export PYTHON="C:\\Python38\\python.exe"
    - export BOOST_ROOT="C:\\Boost"
    - CI_PROJECT_DIR=$(cygpath -w $(pwd)) python .ci/build.py -s build_type=$BUILD_TYPE

conan-windows-debug:
  variables:
    BUILD_TYPE: Debug
  <<: *conan-windows

conan-windows-release:
  variables:
    BUILD_TYPE: Release
  <<: *conan-windows

#conan-windows-32:
#  stage: deploy
#  tags: [gtirb-windows]
#  variables:
#    ARCHITECTURE: x64
#  script:
#    - systeminfo
#    - export PATH="C:\\Program Files\\Python38;$PATH"
#    # Install conan
#    - python -m pip install conan
#    # Run build script
#    - export PYTHONPATH="$(cygpath -w $(pwd))"
#    - export PATH="$PATH;C:\\Program Files\\CMake\\bin"
#    - export CMAKE_PREFIX_PATH="C:\\Program Files (x86)\\protobuf"
#    - export PYTHON="C:\\Python38\\python.exe"
#    - export BOOST_ROOT="C:\\Boost"
#    # The boost options disable building boost with libiconv.  This is important, because we can't get the package to build with --build=libiconv.
#    - CI_PROJECT_DIR=$(cygpath -w $(pwd)) python .ci/build.py -s arch=x86 -s compiler.runtime=MT --build=protobuf -o protobuf:with_zlib=False --build=gtirb --build=boost -o boost:zlib=False -o boost:bzip2=False -o boost:without_locale=True -o boost:without_log=True --build=b2

package-centos8:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/centos8
  needs: ['test-centos8-gtirb']
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*.rpm'
  script:
    - cp build/*.rpm ./

python-wheel:
  stage: deploy
  needs: [build-ubuntu18-gcc7]
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-*-py*-none-any.whl
  script:
    - make -t -C build
    - make -C build python-wheel
    - cp build/python/dist/*.whl ./

#external-pypi:
#  stage: deploy-to-pypi
#  needs: [build-ubuntu18-gcc7, python-wheel]
#  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
#  rules:
#    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
#  script:
#    - pip3 install gtirb-*-py*-none-any.whl
#    - GTIRB_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
#    # We won't be releasing our dev packages externally, so fail if this is a
#    # .dev package.
#    - if [[ "$GTIRB_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ ]]; then exit 1; fi
#    - pip3 install twine wheel setuptools --upgrade;
#    - cd build/python;
#    - rm -rf build dist gtirb.egg-info;
#    - python3 setup.py sdist bdist_wheel;
#    - twine check dist/*;
#    - twine upload dist/* -u __token__ -p $PYPI_API_KEY;

# On master, we only upload and overwrite `.dev` versions of the python
# package.  Non-.dev versions should only be uploaded on versioned
# release-.* branches.  This is so the versioning of our python packages
# coincides with that of our conan packages, where dev packages are
# produced from master, and stable, versioned packages are produced
# on release-.* branches.
#internal-pypi:
#  stage: deploy-to-pypi
#  needs: [build-ubuntu18-gcc7, python-wheel]
#  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "master"'
#    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
#    # If you need to publish a package for a specific branch, change the
#    # package version to something like, '0.0.0.dev0+mybranchname', uncomment
#    # the rule below and replace 'mybranchname' with your branch name.
#    #- if: '$CI_COMMIT_BRANCH == "mybranchname"'
#    #  changes:
#    #    - python/gtirb/setup.py.in
#  script:
#    - pip3 install twine wheel setuptools --upgrade
#    - wget https://git.grammatech.com/research/templates/python-module/raw/master/.pypirc
#    - sed "s/password = <access token>/password = $GL_PKG_API_TOKEN/" .pypirc > ~/.pypirc
#    - pip3 install gtirb-*-py*-none-any.whl
#    - NEW_VERSION=$(python3 -c "import gtirb; print(gtirb.__version__)")
#    - if [[ "$NEW_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ && "$CI_COMMIT_REF_NAME" =~ ^release-.* ]]; then exit 1; fi
#    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
#        if [[ ! "$NEW_VERSION" =~ \.dev[[:digit:]]*$ ]]; then
#          echo "[ERROR] Only .dev versions can be uploaded from the master branch.";
#          exit 1;
#        fi;
#        if pip3 install --extra-index-url=$EXTRA_INDEX_URL "gtirb>$NEW_VERSION" 2>/dev/null; then
#          echo "[ERROR] The package version being published on master should always be >= the version in the repository.";
#          exit 1;
#        fi;
#        wget https://git.grammatech.com/research/templates/python-module/raw/master/delete_remote_packages.py;
#        python3 delete_remote_packages.py $GL_PKG_API_TOKEN gtirb-*-py*-none-any.whl;
#      fi
#    - cd build/python
#    - rm -rf build dist *.egg-info
#    - python3 setup.py sdist bdist_wheel
#    - twine check dist/*
#    - twine upload --verbose --repository repypi dist/*


# Apt packaging related jobs
build-ubuntu18-packages:
  stage: build-installers
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  needs: [build-ubuntu18-gcc7]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - pip3 install setuptools wheel --upgrade
    - cd build
    - CPACK_GTIRB_STABLE_PKG_NAME=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || CPACK_GTIRB_STABLE_PKG_NAME=ON'
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-lib;
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-dev;
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-debug;
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-python;

build-ubuntu20-packages:
  stage: build-installers
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  needs: [build-ubuntu20-gcc]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - pip3 install setuptools wheel --upgrade
    - cd build
    - CPACK_GTIRB_STABLE_PKG_NAME=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || CPACK_GTIRB_STABLE_PKG_NAME=ON'
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-lib;
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-dev;
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-debug;
    - cpack -G "DEB" -D CPACK_GTIRB_STABLE_PKG_NAME=$CPACK_GTIRB_STABLE_PKG_NAME -D CPACK_GTIRB_PACKAGE=debian-python;

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-libgtirb-dev: &test-ubuntu-libgtirb-dev
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo $TRUSTED
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - cat /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-dev.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - cp .ci/test-install.cpp ./
    - g++ test-install.cpp -std=c++17 -o test-install -lgtirb -lstdc++
    - ./test-install

.test-ubuntu-libgtirb: &test-ubuntu-libgtirb
  stage: test-packages2
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ./test-install

.test-ubuntu-libgtirb-dbg: &test-ubuntu-libgtirb-dbg
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-dbg.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb.so | grep ''Build ID: '' | cut -d":" -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ];'

setup-ubuntu18-test-apt-repo:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [build-ubuntu18-packages]
   <<: *setup-test-apt-repo

test-ubuntu18-libgtirb-dev:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [setup-ubuntu18-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dev

test-ubuntu18-libgtirb-dbg:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [setup-ubuntu18-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dbg

test-ubuntu18-libgtirb:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
   needs: [setup-ubuntu18-test-apt-repo,test-ubuntu18-libgtirb-dev]
   <<: *test-ubuntu-libgtirb

setup-ubuntu20-test-apt-repo:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [build-ubuntu20-packages]
   <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-dev:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [setup-ubuntu20-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dev

test-ubuntu20-libgtirb-dbg:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [setup-ubuntu20-test-apt-repo]
   <<: *test-ubuntu-libgtirb-dbg

test-ubuntu20-libgtirb:
   image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
   needs: [setup-ubuntu20-test-apt-repo,test-ubuntu20-libgtirb-dev]
   <<: *test-ubuntu-libgtirb

debian-installer-ubuntu18:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu18
  needs: [test-ubuntu18-libgtirb, build-ubuntu18-packages]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb*.deb'
  script:
    - cp build/*gtirb*.deb ./

debian-installer-ubuntu20:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/ubuntu20
  needs: [test-ubuntu20-libgtirb, build-ubuntu20-packages]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb*.deb'
  script:
    - cp build/*gtirb*.deb ./

.apt-upload: &apt-upload
  stage: deploy-to-apt
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend

public-bionic-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: public
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: unstable

public-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

public-bionic-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: public
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: stable

public-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable

internal-bionic-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: internal
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: unstable

internal-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

internal-bionic-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: internal
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: stable

internal-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable
