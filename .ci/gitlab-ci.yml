variables:
  DOCKER_REGISTRY: "docker.grammatech.com:14850"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - docker info

stages:
  - build-test-ubuntu16-gcc7
  - build-test-ubuntu18-clang
  # - build-test-ubuntu14-gcc
  - build-test-arch-gcc
  - cleanup-ubuntu16-gcc7
  - cleanup-ubuntu18-clang
  # - cleanup-ubuntu14-gcc
  - cleanup-arch-gcc

.build-template: &build
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed s/clang++/clang/ | sed s/g++/gcc/)
    - docker build -f .ci/Dockerfile.$OS -t ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} --build-arg CXX_COMPILER=${COMPILER} .
    - docker run ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} TestGTIRB
    - docker tag ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER_NAME};
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER_NAME};

build-ubuntu16-gcc7:
  stage: build-test-ubuntu16-gcc7
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
  <<: *build

build-ubuntu18-clang:
  stage: build-test-ubuntu18-clang
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang++'
  <<: *build

# This does not work: Ubuntu 14.04 has gcc 4.8.4, which is too old.
#
# build-ubuntu14:
#   stage: build-test-ubuntu14-gcc
#   variables:
#     OS: 'ubuntu14'
#     COMPILER: 'g++'
#   <<: *build

build-arch:
  stage: build-test-arch-gcc
  variables:
    OS: 'arch'
    COMPILER: 'g++'
  <<: *build

cleanup-ubuntu16-gcc7:
  stage: cleanup-ubuntu16-gcc7
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc++-7'
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed s/clang++/clang/ | sed s/g++/gcc/)
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}

cleanup-ubuntu18-clang:
  stage: cleanup-ubuntu18-clang
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang++'
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed s/clang++/clang/ | sed s/g++/gcc/)
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}

# cleanup-ubuntu14-gcc:
#   stage: cleanup-ubuntu14-gcc
#   variables:
#     OS: 'ubuntu14'
#     COMPILER: 'g++'
#   script:
#     - export COMPILER_NAME=$(echo ${COMPILER} | sed s/clang++/clang/ | sed s/g++/gcc/)
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}

cleanup-arch-gcc:
  stage: cleanup-arch-gcc
  variables:
    OS: 'arch'
    COMPILER: 'g++'
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed s/clang++/clang/ | sed s/g++/gcc/)
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}
  except:
    - master

pages:
  stage: cleanup-arch-gcc
  variables:
    OS: 'arch'
    COMPILER: 'g++'
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed s/clang++/clang/ | sed s/g++/gcc/)
    - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-arch.container
    - mkdir -p $(dirname ${CONTAINER_FILE})
    - docker run --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} /bin/bash -c "mkdir -p doc/html; doxygen Doxyfile; cp -R doc/html /public";
    - docker cp  $(cat ${CONTAINER_FILE}):/public ./;
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}
  artifacts:
    paths:
      - public
  only:
    - master
