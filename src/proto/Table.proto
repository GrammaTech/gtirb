//===- Table.proto ----------------------------------------------*- C++ -*-===//
//
//  Copyright (C) 2018 GrammaTech, Inc.
//
//  This code is licensed under the MIT license. See the LICENSE file in the
//  project root for license terms.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
syntax = "proto3";
package proto;

import "InstructionRef.proto";

message InnerMap {
    map<string, InnerValue> contents = 1;
}

message MapVector {
    repeated InnerMap contents = 1;
}

message AddrVector {
    repeated uint64 contents = 1;
}

message IntVector {
    repeated int64 contents = 1;
}

message StringVector {
    repeated bytes contents = 1;
}

message UUIDVector {
    repeated bytes contents = 1;
}

message InstructionVector {
    repeated InstructionRef contents = 1;
}

message InnerValue
{
    oneof value {
        uint64 addr = 1;
        uint64 int = 2;
        bytes str = 3;
        bytes uuid = 4;
        InstructionRef instruction = 5;
        AddrVector addr_vector = 6;
        IntVector int_vector = 7;
        StringVector string_vector = 8;
        UUIDVector uuid_vector = 9;
        InstructionVector instruction_vector = 10;
    }
}

message Value {
    oneof value {
        uint64 addr = 1;
        int64 int = 2;
        bytes str = 3;
        bytes uuid = 4;
        InstructionRef instruction = 5;
        InnerMap map = 6;
    }
}

message AddrMap {
    map<uint64, Value> contents = 1;
}

message IntMap {
    map<int64, Value> contents = 1;
}

message StringMap {
    map<string, Value> contents = 1;
}

message Table {
    oneof value {
        AddrMap by_addr = 1;
        IntMap by_int = 2;
        StringMap by_string = 3;
        // bytes can't be used as map keys, so use the string form of UUIDs
        // here.
        StringMap by_uuid = 4;
        MapVector map_vector = 5;
        AddrVector addr_vector = 6;
        IntVector int_vector = 7;
        StringVector string_vector = 8;
        UUIDVector uuid_vector = 9;
        InstructionVector instruction_vector = 10;
    }
}
