
;;;;    Module.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:gtirb.proto)
    (make-package '#:gtirb.proto :use nil)))
(in-package #:gtirb.proto)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:deftype file-format () '(cl:member 0 1 2 3 4 5 6 7 8))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'file-format))

(cl:defconstant +file-format-format-undefined+ 0)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-format-undefined+))
(cl:defconstant +file-format-coff+ 1)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-coff+))
(cl:defconstant +file-format-elf+ 2)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-elf+))
(cl:defconstant +file-format-pe+ 3)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-pe+))
(cl:defconstant +file-format-ida-pro-db32+ 4)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-ida-pro-db32+))
(cl:defconstant +file-format-ida-pro-db64+ 5)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-ida-pro-db64+))
(cl:defconstant +file-format-xcoff+ 6)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-xcoff+))
(cl:defconstant +file-format-macho+ 7)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-macho+))
(cl:defconstant +file-format-raw+ 8)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+file-format-raw+))

(cl:defconstant +minimum-file-format+ +file-format-format-undefined+)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+minimum-file-format+))
(cl:defconstant +maximum-file-format+ +file-format-raw+)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+maximum-file-format+))

(cl:deftype isa () '(cl:member 0 1 2 3 4 5 6 7 8 9))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'isa))

(cl:defconstant +isa-isa-undefined+ 0)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-isa-undefined+))
(cl:defconstant +isa-ia32+ 1)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-ia32+))
(cl:defconstant +isa-ppc32+ 2)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-ppc32+))
(cl:defconstant +isa-x64+ 3)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-x64+))
(cl:defconstant +isa-arm+ 4)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-arm+))
(cl:defconstant +isa-valid-but-unsupported+ 5)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-valid-but-unsupported+))
(cl:defconstant +isa-ppc64+ 6)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-ppc64+))
(cl:defconstant +isa-arm64+ 7)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-arm64+))
(cl:defconstant +isa-mips32+ 8)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-mips32+))
(cl:defconstant +isa-mips64+ 9)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+isa-mips64+))

(cl:defconstant +minimum-isa+ +isa-isa-undefined+)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+minimum-isa+))
(cl:defconstant +maximum-isa+ +isa-mips64+)
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export '+maximum-isa+))

(cl:defclass module-aux-data-entry (pb:protocol-buffer)
  (
  (key
   :accessor key
   :initform (pb:string-field "")
   :type pb::%sf%)
  (value
   :writer (cl:setf value)
   :initform cl:nil
   :type (cl:or cl:null gtirb.proto::aux-data))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'module-aux-data-entry))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'key))


(cl:defmethod (cl:setf key) :after (x (self module-aux-data-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-key)
  (cl:defgeneric has-key (proto)))
(cl:defmethod has-key ((self module-aux-data-entry))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-key))

(cl:unless (cl:fboundp 'clear-key)
  (cl:defgeneric clear-key (proto)))
(cl:defmethod clear-key ((self module-aux-data-entry))
  (cl:setf (cl:slot-value self 'key) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-key))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'value))

(cl:unless (cl:fboundp 'value)
  (cl:defgeneric value (proto)))
(cl:defmethod value ((self module-aux-data-entry))
  (cl:let ((result (cl:slot-value self 'value)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'gtirb.proto::aux-data))
      (cl:setf (cl:slot-value self 'value) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf value) :after (x (self module-aux-data-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-value)
  (cl:defgeneric has-value (proto)))
(cl:defmethod has-value ((self module-aux-data-entry))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-value))

(cl:unless (cl:fboundp 'clear-value)
  (cl:defgeneric clear-value (proto)))
(cl:defmethod clear-value ((self module-aux-data-entry))
  (cl:setf (cl:slot-value self 'value) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-value))



(cl:defclass module (pb:protocol-buffer)
  (
  (uuid
   :accessor uuid
   :initform (cl:make-array 0 :element-type '(cl:unsigned-byte 8))
   :type (cl:simple-array (cl:unsigned-byte 8) (cl:*)))
  (binary-path
   :accessor binary-path
   :initform (pb:string-field "")
   :type pb::%sf%)
  (preferred-addr
   :accessor preferred-addr
   :initform 0
   :type (cl:unsigned-byte 64))
  (rebase-delta
   :accessor rebase-delta
   :initform 0
   :type (cl:signed-byte 64))
  (file-format
   :accessor file-format
   :initform gtirb.proto::+file-format-format-undefined+
   :type gtirb.proto::file-format)
  (isa
   :accessor isa
   :initform gtirb.proto::+isa-isa-undefined+
   :type gtirb.proto::isa)
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (symbols
   :accessor symbols
   :initform (cl:make-array
              0
              :element-type 'gtirb.proto::symbol
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector gtirb.proto::symbol))
  (proxies
   :accessor proxies
   :initform (cl:make-array
              0
              :element-type 'gtirb.proto::proxy-block
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector gtirb.proto::proxy-block))
  (sections
   :accessor sections
   :initform (cl:make-array
              0
              :element-type 'gtirb.proto::section
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector gtirb.proto::section))
  (aux-data
   :accessor aux-data
   :initform (cl:make-array
              0
              :element-type 'gtirb.proto::module-aux-data-entry
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector gtirb.proto::module-aux-data-entry))
  (entry-point
   :accessor entry-point
   :initform (cl:make-array 0 :element-type '(cl:unsigned-byte 8))
   :type (cl:simple-array (cl:unsigned-byte 8) (cl:*)))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 12))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'module))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'uuid))


(cl:defmethod (cl:setf uuid) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-uuid)
  (cl:defgeneric has-uuid (proto)))
(cl:defmethod has-uuid ((self module))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-uuid))

(cl:unless (cl:fboundp 'clear-uuid)
  (cl:defgeneric clear-uuid (proto)))
(cl:defmethod clear-uuid ((self module))
  (cl:setf (cl:slot-value self 'uuid) (cl:make-array 0 :element-type '(cl:unsigned-byte 8)))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-uuid))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'binary-path))


(cl:defmethod (cl:setf binary-path) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-binary-path)
  (cl:defgeneric has-binary-path (proto)))
(cl:defmethod has-binary-path ((self module))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-binary-path))

(cl:unless (cl:fboundp 'clear-binary-path)
  (cl:defgeneric clear-binary-path (proto)))
(cl:defmethod clear-binary-path ((self module))
  (cl:setf (cl:slot-value self 'binary-path) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-binary-path))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'preferred-addr))


(cl:defmethod (cl:setf preferred-addr) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-preferred-addr)
  (cl:defgeneric has-preferred-addr (proto)))
(cl:defmethod has-preferred-addr ((self module))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-preferred-addr))

(cl:unless (cl:fboundp 'clear-preferred-addr)
  (cl:defgeneric clear-preferred-addr (proto)))
(cl:defmethod clear-preferred-addr ((self module))
  (cl:setf (cl:slot-value self 'preferred-addr) 0)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-preferred-addr))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'rebase-delta))


(cl:defmethod (cl:setf rebase-delta) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-rebase-delta)
  (cl:defgeneric has-rebase-delta (proto)))
(cl:defmethod has-rebase-delta ((self module))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-rebase-delta))

(cl:unless (cl:fboundp 'clear-rebase-delta)
  (cl:defgeneric clear-rebase-delta (proto)))
(cl:defmethod clear-rebase-delta ((self module))
  (cl:setf (cl:slot-value self 'rebase-delta) 0)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-rebase-delta))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'file-format))


(cl:defmethod (cl:setf file-format) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-file-format)
  (cl:defgeneric has-file-format (proto)))
(cl:defmethod has-file-format ((self module))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-file-format))

(cl:unless (cl:fboundp 'clear-file-format)
  (cl:defgeneric clear-file-format (proto)))
(cl:defmethod clear-file-format ((self module))
  (cl:setf (cl:slot-value self 'file-format) gtirb.proto::+file-format-format-undefined+)
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-file-format))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'isa))


(cl:defmethod (cl:setf isa) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-isa)
  (cl:defgeneric has-isa (proto)))
(cl:defmethod has-isa ((self module))
  (cl:logbitp 5 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-isa))

(cl:unless (cl:fboundp 'clear-isa)
  (cl:defgeneric clear-isa (proto)))
(cl:defmethod clear-isa ((self module))
  (cl:setf (cl:slot-value self 'isa) gtirb.proto::+isa-isa-undefined+)
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-isa))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'name))


(cl:defmethod (cl:setf name) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self module))
  (cl:logbitp 6 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-name))

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self module))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-name))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'symbols))

(cl:unless (cl:fboundp 'clear-symbols)
  (cl:defgeneric clear-symbols (proto)))
(cl:defmethod clear-symbols ((self module))
  (cl:setf (cl:slot-value self 'symbols)
           (cl:make-array 0 :element-type 'gtirb.proto::symbol
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-symbols))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'proxies))

(cl:unless (cl:fboundp 'clear-proxies)
  (cl:defgeneric clear-proxies (proto)))
(cl:defmethod clear-proxies ((self module))
  (cl:setf (cl:slot-value self 'proxies)
           (cl:make-array 0 :element-type 'gtirb.proto::proxy-block
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-proxies))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'sections))

(cl:unless (cl:fboundp 'clear-sections)
  (cl:defgeneric clear-sections (proto)))
(cl:defmethod clear-sections ((self module))
  (cl:setf (cl:slot-value self 'sections)
           (cl:make-array 0 :element-type 'gtirb.proto::section
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-sections))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'aux-data))

(cl:unless (cl:fboundp 'clear-aux-data)
  (cl:defgeneric clear-aux-data (proto)))
(cl:defmethod clear-aux-data ((self module))
  (cl:setf (cl:slot-value self 'aux-data)
           (cl:make-array 0 :element-type 'gtirb.proto::module-aux-data-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-aux-data))

(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'entry-point))


(cl:defmethod (cl:setf entry-point) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-entry-point)
  (cl:defgeneric has-entry-point (proto)))
(cl:defmethod has-entry-point ((self module))
  (cl:logbitp 11 (cl:slot-value self '%has-bits%)))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'has-entry-point))

(cl:unless (cl:fboundp 'clear-entry-point)
  (cl:defgeneric clear-entry-point (proto)))
(cl:defmethod clear-entry-point ((self module))
  (cl:setf (cl:slot-value self 'entry-point) (cl:make-array 0 :element-type '(cl:unsigned-byte 8)))
  (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:eval-when (:load-toplevel :compile-toplevel :execute)
  (cl:export 'clear-entry-point))


(cl:defmethod cl:print-object ((self module-aux-data-entry) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_key: ~s" (key self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_value: ~s" (value self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self module-aux-data-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (pb:string-field "")))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'value) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self module-aux-data-entry))
  cl:t)

(cl:defmethod pb:octet-size ((self module-aux-data-entry))
  (cl:let ((size 0))
    ;; string key = 1[json_name = "key"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'key))))
        (cl:+ s (varint:length32 s)))))
    ;; .gtirb.proto.AuxData value = 2[json_name = "value"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'value))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self module-aux-data-entry) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string key = 1[json_name = "key"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'key) 'pb::%octets%))))
  ;; .gtirb.proto.AuxData value = 2[json_name = "value"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'value) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'value) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self module-aux-data-entry) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (field-number wire-type new-index)
        (wire-format:parse-tag buffer index limit)
      (cl:setf index new-index)
      (cl:case field-number
        ;; string key = 1[json_name = "key"];
        ((1)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (value new-index)
                  (wire-format:read-octets-carefully buffer index limit)
                (cl:setf (cl:slot-value self 'key) (pb:string-field value))
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; .gtirb.proto.AuxData value = 2[json_name = "value"];
        ((2)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (length new-index)
                  (varint:parse-uint31-carefully buffer index limit)
                (cl:when (cl:> (cl:+ new-index length) limit)
                  (cl:error 'wire-format:data-exhausted))
                (cl:let ((message (cl:slot-value self 'value)))
                  (cl:when (cl:null message)
                    (cl:setf message (cl:make-instance 'gtirb.proto::aux-data))
                    (cl:setf (cl:slot-value self 'value) message)
                    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
                  (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
                  (cl:when (cl:/= index (cl:+ new-index length))
                    (cl:error 'wire-format:alignment)))))
            (cl:t (cl:error 'wire-format:alignment))))
        (cl:t
          (cl:when (cl:= wire-type wire-format:+end-group+)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index
            (wire-format:skip-field field-number wire-type buffer index limit))
          )))))

(cl:defmethod pb:merge-from-message ((self module-aux-data-entry) (from module-aux-data-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (cl:slot-value from 'key))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'value)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'gtirb.proto::aux-data))
        (cl:setf (cl:slot-value self 'value) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'value))))
)



(cl:defmethod cl:print-object ((self module) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_uuid: ~s" (uuid self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_binary-path: ~s" (binary-path self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_preferred-addr: ~s" (preferred-addr self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_rebase-delta: ~s" (rebase-delta self)))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_file-format: ~s" (file-format self)))
      (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_isa: ~s" (isa self)))
      (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:format stream " ~_symbols: ~s" (symbols self))
      (cl:format stream " ~_proxies: ~s" (proxies self))
      (cl:format stream " ~_sections: ~s" (sections self))
      (cl:format stream " ~_aux-data: ~s" (aux-data self))
      (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_entry-point: ~s" (entry-point self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self module))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'uuid) (cl:make-array 0 :element-type '(cl:unsigned-byte 8))))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'binary-path) (pb:string-field "")))
  (cl:setf (cl:slot-value self 'preferred-addr) 0)
  (cl:setf (cl:slot-value self 'rebase-delta) 0)
  (cl:setf (cl:slot-value self 'file-format) gtirb.proto::+file-format-format-undefined+)
  (cl:setf (cl:slot-value self 'isa) gtirb.proto::+isa-isa-undefined+)
  (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'entry-point) (cl:make-array 0 :element-type '(cl:unsigned-byte 8))))
  (cl:setf (cl:slot-value self 'symbols)
           (cl:make-array 0 :element-type 'gtirb.proto::symbol
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self 'proxies)
           (cl:make-array 0 :element-type 'gtirb.proto::proxy-block
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self 'sections)
           (cl:make-array 0 :element-type 'gtirb.proto::section
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self 'aux-data)
           (cl:make-array 0 :element-type 'gtirb.proto::module-aux-data-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self module))
  cl:t)

(cl:defmethod pb:octet-size ((self module))
  (cl:let ((size 0))
    ;; bytes uuid = 1[json_name = "uuid"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (cl:length (cl:slot-value self 'uuid))))
        (cl:+ s (varint:length32 s)))))
    ;; string binary_path = 2[json_name = "binaryPath"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'binary-path))))
        (cl:+ s (varint:length32 s)))))
    ;; uint64 preferred_addr = 3[json_name = "preferredAddr"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:slot-value self 'preferred-addr)))))
    ;; int64 rebase_delta = 4[json_name = "rebaseDelta"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'rebase-delta))))))
    ;; .gtirb.proto.FileFormat file_format = 5[json_name = "fileFormat"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'file-format)))))
    ;; .gtirb.proto.ISA isa = 6[json_name = "isa"];
    (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'isa)))))
    ;; string name = 7[json_name = "name"];
    (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    ;; bytes entry_point = 18[json_name = "entryPoint"];
    (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
      (cl:incf size 2)
      (cl:incf size (cl:let ((s (cl:length (cl:slot-value self 'entry-point))))
        (cl:+ s (varint:length32 s)))))
    ;; repeated .gtirb.proto.Symbol symbols = 9[json_name = "symbols"];
    (cl:let* ((v (cl:slot-value self 'symbols))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    ;; repeated .gtirb.proto.ProxyBlock proxies = 16[json_name = "proxies"];
    (cl:let* ((v (cl:slot-value self 'proxies))
              (length (cl:length v)))
      (cl:incf size (cl:* 2 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    ;; repeated .gtirb.proto.Section sections = 12[json_name = "sections"];
    (cl:let* ((v (cl:slot-value self 'sections))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    ;; map<string, .gtirb.proto.AuxData> aux_data = 17[json_name = "auxData"];
    (cl:let* ((v (cl:slot-value self 'aux-data))
              (length (cl:length v)))
      (cl:incf size (cl:* 2 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self module) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; bytes uuid = 1[json_name = "uuid"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value self 'uuid))))
  ;; string binary_path = 2[json_name = "binaryPath"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'binary-path) 'pb::%octets%))))
  ;; uint64 preferred_addr = 3[json_name = "preferredAddr"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:slot-value self 'preferred-addr))))
  ;; int64 rebase_delta = 4[json_name = "rebaseDelta"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 32))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'rebase-delta)))))
  ;; .gtirb.proto.FileFormat file_format = 5[json_name = "fileFormat"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 40))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'file-format)))))
  ;; .gtirb.proto.ISA isa = 6[json_name = "isa"];
  (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 48))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'isa)))))
  ;; string name = 7[json_name = "name"];
  (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 58))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  ;; repeated .gtirb.proto.Symbol symbols = 9[json_name = "symbols"];
  (cl:let* ((v (cl:slot-value self 'symbols))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 74))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; repeated .gtirb.proto.Section sections = 12[json_name = "sections"];
  (cl:let* ((v (cl:slot-value self 'sections))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 98))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; repeated .gtirb.proto.ProxyBlock proxies = 16[json_name = "proxies"];
  (cl:let* ((v (cl:slot-value self 'proxies))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 130))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; map<string, .gtirb.proto.AuxData> aux_data = 17[json_name = "auxData"];
  (cl:let* ((v (cl:slot-value self 'aux-data))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 138))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; bytes entry_point = 18[json_name = "entryPoint"];
  (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 146))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value self 'entry-point))))
  index)

(cl:defmethod pb:merge-from-array ((self module) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (field-number wire-type new-index)
        (wire-format:parse-tag buffer index limit)
      (cl:setf index new-index)
      (cl:case field-number
        ;; bytes uuid = 1[json_name = "uuid"];
        ((1)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (value new-index)
                  (wire-format:read-octets-carefully buffer index limit)
                (cl:setf (cl:slot-value self 'uuid) value)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; string binary_path = 2[json_name = "binaryPath"];
        ((2)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (value new-index)
                  (wire-format:read-octets-carefully buffer index limit)
                (cl:setf (cl:slot-value self 'binary-path) (pb:string-field value))
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; uint64 preferred_addr = 3[json_name = "preferredAddr"];
        ((3)
          (cl:cond
            ((cl:= wire-type wire-format:+varint+)
              (cl:multiple-value-bind (value new-index)
                  (varint:parse-uint64-carefully buffer index limit)
                (cl:setf (cl:slot-value self 'preferred-addr) value)
                (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; int64 rebase_delta = 4[json_name = "rebaseDelta"];
        ((4)
          (cl:cond
            ((cl:= wire-type wire-format:+varint+)
              (cl:multiple-value-bind (value new-index)
                  (varint:parse-int64-carefully buffer index limit)
                (cl:setf (cl:slot-value self 'rebase-delta) value)
                (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; .gtirb.proto.FileFormat file_format = 5[json_name = "fileFormat"];
        ((5)
          (cl:cond
            ((cl:= wire-type wire-format:+varint+)
              (cl:multiple-value-bind (value new-index)
                  (varint:parse-int32-carefully buffer index limit)
                ;; XXXXX: when valid, set field, else add to unknown fields
                (cl:setf (cl:slot-value self 'file-format) value)
                (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; .gtirb.proto.ISA isa = 6[json_name = "isa"];
        ((6)
          (cl:cond
            ((cl:= wire-type wire-format:+varint+)
              (cl:multiple-value-bind (value new-index)
                  (varint:parse-int32-carefully buffer index limit)
                ;; XXXXX: when valid, set field, else add to unknown fields
                (cl:setf (cl:slot-value self 'isa) value)
                (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; string name = 7[json_name = "name"];
        ((7)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (value new-index)
                  (wire-format:read-octets-carefully buffer index limit)
                (cl:setf (cl:slot-value self 'name) (pb:string-field value))
                (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; repeated .gtirb.proto.Symbol symbols = 9[json_name = "symbols"];
        ((9)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (length new-index)
                  (varint:parse-uint31-carefully buffer index limit)
                (cl:when (cl:> (cl:+ new-index length) limit)
                  (cl:error 'wire-format:data-exhausted))
                (cl:let ((message (cl:make-instance 'gtirb.proto::symbol)))
                  (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
                  (cl:when (cl:/= index (cl:+ new-index length))
                    (cl:error 'wire-format:alignment))
                  (cl:vector-push-extend message (cl:slot-value self 'symbols)))))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; repeated .gtirb.proto.Section sections = 12[json_name = "sections"];
        ((12)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (length new-index)
                  (varint:parse-uint31-carefully buffer index limit)
                (cl:when (cl:> (cl:+ new-index length) limit)
                  (cl:error 'wire-format:data-exhausted))
                (cl:let ((message (cl:make-instance 'gtirb.proto::section)))
                  (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
                  (cl:when (cl:/= index (cl:+ new-index length))
                    (cl:error 'wire-format:alignment))
                  (cl:vector-push-extend message (cl:slot-value self 'sections)))))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; repeated .gtirb.proto.ProxyBlock proxies = 16[json_name = "proxies"];
        ((16)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (length new-index)
                  (varint:parse-uint31-carefully buffer index limit)
                (cl:when (cl:> (cl:+ new-index length) limit)
                  (cl:error 'wire-format:data-exhausted))
                (cl:let ((message (cl:make-instance 'gtirb.proto::proxy-block)))
                  (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
                  (cl:when (cl:/= index (cl:+ new-index length))
                    (cl:error 'wire-format:alignment))
                  (cl:vector-push-extend message (cl:slot-value self 'proxies)))))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; map<string, .gtirb.proto.AuxData> aux_data = 17[json_name = "auxData"];
        ((17)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (length new-index)
                  (varint:parse-uint31-carefully buffer index limit)
                (cl:when (cl:> (cl:+ new-index length) limit)
                  (cl:error 'wire-format:data-exhausted))
                (cl:let ((message (cl:make-instance 'gtirb.proto::module-aux-data-entry)))
                  (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
                  (cl:when (cl:/= index (cl:+ new-index length))
                    (cl:error 'wire-format:alignment))
                  (cl:vector-push-extend message (cl:slot-value self 'aux-data)))))
            (cl:t (cl:error 'wire-format:alignment))))
        ;; bytes entry_point = 18[json_name = "entryPoint"];
        ((18)
          (cl:cond
            ((cl:= wire-type wire-format:+length-delimited+)
              (cl:multiple-value-bind (value new-index)
                  (wire-format:read-octets-carefully buffer index limit)
                (cl:setf (cl:slot-value self 'entry-point) value)
                (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 1)
                (cl:setf index new-index)))
            (cl:t (cl:error 'wire-format:alignment))))
        (cl:t
          (cl:when (cl:= wire-type wire-format:+end-group+)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index
            (wire-format:skip-field field-number wire-type buffer index limit))
          )))))

(cl:defmethod pb:merge-from-message ((self module) (from module))
  (cl:let* ((v (cl:slot-value self 'symbols))
            (vf (cl:slot-value from 'symbols))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:let* ((v (cl:slot-value self 'proxies))
            (vf (cl:slot-value from 'proxies))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:let* ((v (cl:slot-value self 'sections))
            (vf (cl:slot-value from 'sections))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:let* ((v (cl:slot-value self 'aux-data))
            (vf (cl:slot-value from 'aux-data))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'uuid) (cl:slot-value from 'uuid))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'binary-path) (cl:slot-value from 'binary-path))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'preferred-addr) (cl:slot-value from 'preferred-addr))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'rebase-delta) (cl:slot-value from 'rebase-delta))
    (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'file-format) (cl:slot-value from 'file-format))
    (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 5 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'isa) (cl:slot-value from 'isa))
    (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 6 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 11 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'entry-point) (cl:slot-value from 'entry-point))
    (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 1))
)


